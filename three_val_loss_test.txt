True
11721506816
0
Training on GPU... Ready for HyperJump...
Traceback (most recent call last):
  File "three_models_test.py", line 65, in <module>
    model_stanford = densenet_Model(pretrained=True)
  File "three_models_test.py", line 57, in densenet_Model
    model = model.to(device) # Transfer the Model to GPU if available
  File "/DATA/chowdari1/.local/lib/python3.7/site-packages/torch/nn/modules/module.py", line 899, in to
    return self._apply(convert)
  File "/DATA/chowdari1/.local/lib/python3.7/site-packages/torch/nn/modules/module.py", line 570, in _apply
    module._apply(fn)
  File "/DATA/chowdari1/.local/lib/python3.7/site-packages/torch/nn/modules/module.py", line 570, in _apply
    module._apply(fn)
  File "/DATA/chowdari1/.local/lib/python3.7/site-packages/torch/nn/modules/module.py", line 570, in _apply
    module._apply(fn)
  [Previous line repeated 1 more time]
  File "/DATA/chowdari1/.local/lib/python3.7/site-packages/torch/nn/modules/module.py", line 593, in _apply
    param_applied = fn(param)
  File "/DATA/chowdari1/.local/lib/python3.7/site-packages/torch/nn/modules/module.py", line 897, in convert
    return t.to(device, dtype if t.is_floating_point() or t.is_complex() else None, non_blocking)
RuntimeError: CUDA out of memory. Tried to allocate 2.00 MiB (GPU 3; 10.92 GiB total capacity; 49.73 MiB already allocated; 7.00 MiB free; 66.00 MiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
